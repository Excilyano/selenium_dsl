/**
 * generated by Xtext
 */
package fr.imta.tp.selenium.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import fr.imta.tp.selenium.selenium.Array;
import fr.imta.tp.selenium.selenium.ArrayAccess;
import fr.imta.tp.selenium.selenium.BROWSER;
import fr.imta.tp.selenium.selenium.COMPARATOR;
import fr.imta.tp.selenium.selenium.CallNative;
import fr.imta.tp.selenium.selenium.CallNativeWithResult;
import fr.imta.tp.selenium.selenium.Click;
import fr.imta.tp.selenium.selenium.Close;
import fr.imta.tp.selenium.selenium.Fill;
import fr.imta.tp.selenium.selenium.Find;
import fr.imta.tp.selenium.selenium.FindMultiple;
import fr.imta.tp.selenium.selenium.Get;
import fr.imta.tp.selenium.selenium.Go;
import fr.imta.tp.selenium.selenium.Len;
import fr.imta.tp.selenium.selenium.Open;
import fr.imta.tp.selenium.selenium.Operation;
import fr.imta.tp.selenium.selenium.PROPERTY;
import fr.imta.tp.selenium.selenium.Procedure;
import fr.imta.tp.selenium.selenium.ProcedureBody;
import fr.imta.tp.selenium.selenium.ProcedureCall;
import fr.imta.tp.selenium.selenium.ProcedureParameter;
import fr.imta.tp.selenium.selenium.Program;
import fr.imta.tp.selenium.selenium.SeleniumType;
import fr.imta.tp.selenium.selenium.Show;
import fr.imta.tp.selenium.selenium.ShowMultiple;
import fr.imta.tp.selenium.selenium.Statement;
import fr.imta.tp.selenium.selenium.TYPE;
import fr.imta.tp.selenium.selenium.Variable;
import fr.imta.tp.selenium.selenium.VariableDeclaration;
import fr.imta.tp.selenium.selenium.Verify;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class SeleniumGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Program> _filter = Iterables.<Program>filter(_iterable, Program.class);
    for (final Program p : _filter) {
      CharSequence _generateProgram = this.generateProgram(p);
      fsa.generateFile(
        "Main.java", _generateProgram);
    }
  }
  
  public CharSequence generateProgram(final Program p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.junit.Assert;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebElement;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.chrome.ChromeDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.firefox.FirefoxDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.By;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.lang.StringBuilder;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Main {");
    _builder.newLine();
    {
      EList<Procedure> _procedures = p.getProcedures();
      for(final Procedure pr : _procedures) {
        CharSequence _generateProcedure = this.generateProcedure(pr);
        _builder.append(_generateProcedure, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    {
      EList<Statement> _statements = p.getStatements();
      for(final Statement st : _statements) {
        CharSequence _generate = this.generate(st);
        _builder.append(_generate, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateProcedure(final Procedure pr) {
    StringConcatenation _builder = new StringConcatenation();
    TYPE _type = pr.getType();
    final String procT = this.getType(_type);
    _builder.newLineIfNotEmpty();
    _builder.append("public static ");
    _builder.append(procT, "");
    _builder.append(" ");
    String _name = pr.getName();
    _builder.append(_name, "");
    _builder.append("(");
    {
      EList<ProcedureParameter> _params = pr.getParams();
      for(final ProcedureParameter par : _params) {
        TYPE _type_1 = par.getType();
        final String t = this.getType(_type_1);
        _builder.append(t, "");
        _builder.append(" ");
        String _name_1 = par.getName();
        _builder.append(_name_1, "");
        {
          EList<ProcedureParameter> _params_1 = pr.getParams();
          int _indexOf = _params_1.indexOf(par);
          EList<ProcedureParameter> _params_2 = pr.getParams();
          int _length = ((Object[])Conversions.unwrapArray(_params_2, Object.class)).length;
          int _minus = (_length - 1);
          boolean _lessThan = (_indexOf < _minus);
          if (_lessThan) {
            _builder.append(", ");
          }
        }
      }
    }
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    {
      ProcedureBody _body = pr.getBody();
      EList<Statement> _statements = _body.getStatements();
      for(final Statement st : _statements) {
        _builder.append("\t\t");
        CharSequence _generate = this.generate(st);
        _builder.append(_generate, "		");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("return ");
    ProcedureBody _body_1 = pr.getBody();
    SeleniumType _value = _body_1.getValue();
    String _name_2 = _value.getName();
    _builder.append(_name_2, "		");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String getType(final TYPE type) {
    String _switchResult = null;
    boolean _matched = false;
    if (!_matched) {
      if (Objects.equal(type,TYPE.INTEGER)) {
        _matched=true;
        _switchResult = "Integer";
      }
    }
    if (!_matched) {
      if (Objects.equal(type,TYPE.STRING)) {
        _matched=true;
        _switchResult = "String";
      }
    }
    if (!_matched) {
      if (Objects.equal(type,TYPE.WEBELEMENT)) {
        _matched=true;
        _switchResult = "WebElement";
      }
    }
    if (!_matched) {
      if (Objects.equal(type,TYPE.ARRAY)) {
        _matched=true;
        _switchResult = "List<WebElement>";
      }
    }
    return _switchResult;
  }
  
  protected CharSequence _generate(final VariableDeclaration vd) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateVariableDeclaration = this.generateVariableDeclaration(vd);
    _builder.append(_generateVariableDeclaration, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateVariableDeclaration(final ProcedureCall pc) {
    StringConcatenation _builder = new StringConcatenation();
    Procedure _proc = pc.getProc();
    TYPE _type = _proc.getType();
    final String procT = this.getType(_type);
    _builder.newLineIfNotEmpty();
    _builder.append(procT, "");
    _builder.append(" ");
    Variable _variable = pc.getVariable();
    String _name = _variable.getName();
    _builder.append(_name, "");
    _builder.append(" = ");
    Procedure _proc_1 = pc.getProc();
    String _name_1 = _proc_1.getName();
    _builder.append(_name_1, "");
    _builder.append("(");
    {
      EList<SeleniumType> _params = pc.getParams();
      for(final SeleniumType par : _params) {
        String _name_2 = par.getName();
        _builder.append(_name_2, "");
        {
          EList<SeleniumType> _params_1 = pc.getParams();
          int _indexOf = _params_1.indexOf(par);
          EList<SeleniumType> _params_2 = pc.getParams();
          int _length = ((Object[])Conversions.unwrapArray(_params_2, Object.class)).length;
          int _minus = (_length - 1);
          boolean _lessThan = (_indexOf < _minus);
          if (_lessThan) {
            _builder.append(", ");
          }
        }
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateVariableDeclaration(final Operation op) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _strvalue = op.getStrvalue();
      boolean _notEquals = (!Objects.equal(_strvalue, null));
      if (_notEquals) {
        _builder.append("String ");
        Variable _variable = op.getVariable();
        String _name = _variable.getName();
        _builder.append(_name, "");
        _builder.append(" = \"");
        String _strvalue_1 = op.getStrvalue();
        _builder.append(_strvalue_1, "");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("Integer ");
        Variable _variable_1 = op.getVariable();
        String _name_1 = _variable_1.getName();
        _builder.append(_name_1, "");
        _builder.append(" = ");
        int _intvalue = op.getIntvalue();
        _builder.append(_intvalue, "");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _generate(final CallNative cn) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateCallNative = this.generateCallNative(cn);
    _builder.append(_generateCallNative, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateVariableDeclaration(final CallNativeWithResult cn) {
    StringConcatenation _builder = new StringConcatenation();
    Variable _variable = cn.getVariable();
    String _name = _variable.getName();
    CharSequence _generateCallNativeWithResult = this.generateCallNativeWithResult(cn, _name);
    _builder.append(_generateCallNativeWithResult, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateCallNative(final Open op) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.setProperty(\"webdriver.chrome.driver\", \"drivers/chromedriver.exe\");");
    _builder.newLine();
    _builder.append("System.setProperty(\"webdriver.gecko.driver\", \"drivers/geckodriver.exe\");");
    _builder.newLine();
    {
      BROWSER _browser = op.getBrowser();
      boolean _equals = Objects.equal(_browser, BROWSER.CHROME);
      if (_equals) {
        _builder.append("WebDriver driver = new ChromeDriver();");
        _builder.newLine();
      } else {
        BROWSER _browser_1 = op.getBrowser();
        boolean _equals_1 = Objects.equal(_browser_1, BROWSER.FIREFOX);
        if (_equals_1) {
          _builder.append("WebDriver driver = new FirefoxDriver();");
          _builder.newLine();
        }
      }
    }
    _builder.append("driver.manage().window().maximize();");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generateCallNative(final Close cl) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.close();");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generateCallNative(final Go g) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.get(");
    SeleniumType _location = g.getLocation();
    String _name = _location.getName();
    _builder.append(_name, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateCallNative(final Fill f) {
    StringConcatenation _builder = new StringConcatenation();
    SeleniumType _elem = f.getElem();
    String _name = _elem.getName();
    _builder.append(_name, "");
    _builder.append(".sendKeys(\"");
    SeleniumType _value = f.getValue();
    String _name_1 = _value.getName();
    _builder.append(_name_1, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateCallNative(final Click cl) {
    StringConcatenation _builder = new StringConcatenation();
    SeleniumType _elem = cl.getElem();
    _builder.append(_elem, "");
    _builder.append(".click();");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateCallNative(final Verify v) {
    StringConcatenation _builder = new StringConcatenation();
    {
      COMPARATOR _comp = v.getComp();
      boolean _equals = Objects.equal(_comp, COMPARATOR.EQUALS);
      if (_equals) {
        _builder.append("Assert.assertEquals(");
        SeleniumType _elem = v.getElem();
        String _name = _elem.getName();
        _builder.append(_name, "");
        _builder.append(", ");
        SeleniumType _value = v.getValue();
        String _name_1 = _value.getName();
        _builder.append(_name_1, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      } else {
        COMPARATOR _comp_1 = v.getComp();
        boolean _equals_1 = Objects.equal(_comp_1, COMPARATOR.CONTAINS);
        if (_equals_1) {
          _builder.append("Assert.assertTrue(");
          SeleniumType _elem_1 = v.getElem();
          String _name_2 = _elem_1.getName();
          _builder.append(_name_2, "");
          _builder.append(".contains(");
          SeleniumType _value_1 = v.getValue();
          String _name_3 = _value_1.getName();
          _builder.append(_name_3, "");
          _builder.append("));");
          _builder.newLineIfNotEmpty();
        } else {
          COMPARATOR _comp_2 = v.getComp();
          boolean _equals_2 = Objects.equal(_comp_2, COMPARATOR.DIFFERENT);
          if (_equals_2) {
            _builder.append("Assert.assertNotEquals(");
            SeleniumType _elem_2 = v.getElem();
            String _name_4 = _elem_2.getName();
            _builder.append(_name_4, "");
            _builder.append(", ");
            SeleniumType _value_2 = v.getValue();
            String _name_5 = _value_2.getName();
            _builder.append(_name_5, "");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          } else {
            COMPARATOR _comp_3 = v.getComp();
            boolean _equals_3 = Objects.equal(_comp_3, COMPARATOR.GREATER);
            if (_equals_3) {
              _builder.append("Assert.assertTrue(");
              SeleniumType _elem_3 = v.getElem();
              String _name_6 = _elem_3.getName();
              _builder.append(_name_6, "");
              _builder.append(" > ");
              SeleniumType _value_3 = v.getValue();
              String _name_7 = _value_3.getName();
              _builder.append(_name_7, "");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              COMPARATOR _comp_4 = v.getComp();
              boolean _equals_4 = Objects.equal(_comp_4, COMPARATOR.LOWER);
              if (_equals_4) {
                _builder.append("Assert.assertTrue(");
                SeleniumType _elem_4 = v.getElem();
                String _name_8 = _elem_4.getName();
                _builder.append(_name_8, "");
                _builder.append(" < ");
                SeleniumType _value_4 = v.getValue();
                String _name_9 = _value_4.getName();
                _builder.append(_name_9, "");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              } else {
                COMPARATOR _comp_5 = v.getComp();
                boolean _equals_5 = Objects.equal(_comp_5, COMPARATOR.STARTS);
                if (_equals_5) {
                  _builder.append("Assert.assertTrue(");
                  SeleniumType _elem_5 = v.getElem();
                  String _name_10 = _elem_5.getName();
                  _builder.append(_name_10, "");
                  _builder.append(".startsWith(");
                  SeleniumType _value_5 = v.getValue();
                  String _name_11 = _value_5.getName();
                  _builder.append(_name_11, "");
                  _builder.append("));");
                  _builder.newLineIfNotEmpty();
                } else {
                  COMPARATOR _comp_6 = v.getComp();
                  boolean _equals_6 = Objects.equal(_comp_6, COMPARATOR.ENDS);
                  if (_equals_6) {
                    _builder.append("Assert.assertTrue(");
                    SeleniumType _elem_6 = v.getElem();
                    String _name_12 = _elem_6.getName();
                    _builder.append(_name_12, "");
                    _builder.append(".endsWith(");
                    SeleniumType _value_6 = v.getValue();
                    String _name_13 = _value_6.getName();
                    _builder.append(_name_13, "");
                    _builder.append("));");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  protected CharSequence _generateCallNative(final Show sh) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ArrayAccess _arrayAccess = sh.getArrayAccess();
      boolean _notEquals = (!Objects.equal(_arrayAccess, null));
      if (_notEquals) {
        _builder.append("System.out.println(");
        SeleniumType _elem = sh.getElem();
        String _name = _elem.getName();
        _builder.append(_name, "");
        _builder.append(".get(");
        ArrayAccess _arrayAccess_1 = sh.getArrayAccess();
        int _id = _arrayAccess_1.getId();
        _builder.append(_id, "");
        _builder.append(").toString());");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("System.out.println(");
        SeleniumType _elem_1 = sh.getElem();
        String _name_1 = _elem_1.getName();
        _builder.append(_name_1, "");
        _builder.append(".toString());");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _generateCallNative(final ShowMultiple sm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("StringBuilder sb = new StringBuilder();");
    _builder.newLine();
    _builder.append("sb.append(\"");
    SeleniumType _elem = sm.getElem();
    String _name = _elem.getName();
    _builder.append(_name, "");
    _builder.append(" => [\\n\");");
    _builder.newLineIfNotEmpty();
    _builder.append("for(WebElement elem : ");
    SeleniumType _elem_1 = sm.getElem();
    String _name_1 = _elem_1.getName();
    _builder.append(_name_1, "");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("sb.append(\"\\tElement : \" + elem.getTagName() + \", \\n\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sb.append(\"\\tId : \" + elem.getAttribute(\"id\") + \", \\n\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sb.append(\"\\tName : \" + elem.getAttribute(\"name\") + \", \\n\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sb.append(\"\\tClass : \" + elem.getAttribute(\"class\") + \", \\n\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sb.append(\"\\tValue : \" + elem.getAttribute(\"value\") + \", \\n\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sb.append(\"\\tContent : \" + elem.getText() + \"\\n\\n\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("sb.append(\"]\\n\");");
    _builder.newLine();
    _builder.append("System.out.println(sb.toString());");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generateCallNativeWithResult(final Find f, final String variableName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement ");
    _builder.append(variableName, "");
    _builder.append(" = driver.findElement(By.");
    PROPERTY _prop = f.getProp();
    _builder.append(_prop, "");
    _builder.append("(");
    SeleniumType _value = f.getValue();
    String _name = _value.getName();
    _builder.append(_name, "");
    _builder.append("));");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generate(final FindMultiple f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("List<WebElement> ");
    Array _array = f.getArray();
    String _name = _array.getName();
    _builder.append(_name, "");
    _builder.append(" = driver.findElements(By.");
    PROPERTY _prop = f.getProp();
    _builder.append(_prop, "");
    _builder.append("(");
    SeleniumType _value = f.getValue();
    String _name_1 = _value.getName();
    _builder.append(_name_1, "");
    _builder.append("));");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateCallNativeWithResult(final Get g, final String variableName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("String ");
    _builder.append(variableName, "");
    _builder.append(" = ");
    SeleniumType _elem = g.getElem();
    String _name = _elem.getName();
    _builder.append(_name, "");
    _builder.append(".getAttribute(\"");
    PROPERTY _prop = g.getProp();
    _builder.append(_prop, "");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateCallNativeWithResult(final Len l, final String variableName) {
    StringConcatenation _builder = new StringConcatenation();
    SeleniumType _elem = l.getElem();
    CharSequence _generateLength = this.generateLength(_elem, variableName);
    _builder.append(_generateLength, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateLength(final Variable v, final String variableName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Integer ");
    _builder.append(variableName, "");
    _builder.append(" = ");
    String _name = v.getName();
    _builder.append(_name, "");
    _builder.append(".length();");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _generateLength(final Array a, final String variableName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Integer ");
    _builder.append(variableName, "");
    _builder.append(" = ");
    String _name = a.getName();
    _builder.append(_name, "");
    _builder.append(".size();");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generate(final Statement cn) {
    if (cn instanceof CallNative) {
      return _generate((CallNative)cn);
    } else if (cn instanceof FindMultiple) {
      return _generate((FindMultiple)cn);
    } else if (cn instanceof VariableDeclaration) {
      return _generate((VariableDeclaration)cn);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(cn).toString());
    }
  }
  
  public CharSequence generateVariableDeclaration(final VariableDeclaration cn) {
    if (cn instanceof CallNativeWithResult) {
      return _generateVariableDeclaration((CallNativeWithResult)cn);
    } else if (cn instanceof Operation) {
      return _generateVariableDeclaration((Operation)cn);
    } else if (cn instanceof ProcedureCall) {
      return _generateVariableDeclaration((ProcedureCall)cn);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(cn).toString());
    }
  }
  
  public CharSequence generateCallNative(final CallNative cl) {
    if (cl instanceof Click) {
      return _generateCallNative((Click)cl);
    } else if (cl instanceof Close) {
      return _generateCallNative((Close)cl);
    } else if (cl instanceof Fill) {
      return _generateCallNative((Fill)cl);
    } else if (cl instanceof Go) {
      return _generateCallNative((Go)cl);
    } else if (cl instanceof Open) {
      return _generateCallNative((Open)cl);
    } else if (cl instanceof Show) {
      return _generateCallNative((Show)cl);
    } else if (cl instanceof ShowMultiple) {
      return _generateCallNative((ShowMultiple)cl);
    } else if (cl instanceof Verify) {
      return _generateCallNative((Verify)cl);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(cl).toString());
    }
  }
  
  public CharSequence generateCallNativeWithResult(final CallNativeWithResult f, final String variableName) {
    if (f instanceof Find) {
      return _generateCallNativeWithResult((Find)f, variableName);
    } else if (f instanceof Get) {
      return _generateCallNativeWithResult((Get)f, variableName);
    } else if (f instanceof Len) {
      return _generateCallNativeWithResult((Len)f, variableName);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(f, variableName).toString());
    }
  }
  
  public CharSequence generateLength(final SeleniumType a, final String variableName) {
    if (a instanceof Array) {
      return _generateLength((Array)a, variableName);
    } else if (a instanceof Variable) {
      return _generateLength((Variable)a, variableName);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(a, variableName).toString());
    }
  }
}
