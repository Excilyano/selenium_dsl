/*
* generated by Xtext
*/
package fr.imta.tp.selenium.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SeleniumGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cProgramAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgramProgramParserRuleCall_0 = (RuleCall)cProgramAssignment.eContents().get(0);
		
		//Model:
		//	program=Program;
		public ParserRule getRule() { return rule; }

		//program=Program
		public Assignment getProgramAssignment() { return cProgramAssignment; }

		//Program
		public RuleCall getProgramProgramParserRuleCall_0() { return cProgramProgramParserRuleCall_0; }
	}

	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProceduresAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProceduresProcedureParserRuleCall_0_0 = (RuleCall)cProceduresAssignment_0.eContents().get(0);
		private final Keyword cExecuteKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//Program:
		//	procedures+=Procedure* "execute" ":" statements+=Statement+;
		public ParserRule getRule() { return rule; }

		//procedures+=Procedure* "execute" ":" statements+=Statement+
		public Group getGroup() { return cGroup; }

		//procedures+=Procedure*
		public Assignment getProceduresAssignment_0() { return cProceduresAssignment_0; }

		//Procedure
		public RuleCall getProceduresProcedureParserRuleCall_0_0() { return cProceduresProcedureParserRuleCall_0_0; }

		//"execute"
		public Keyword getExecuteKeyword_1() { return cExecuteKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePROC_NAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsProcedureParameterParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Keyword cSpaceEqualsSignEqualsSignGreaterThanSignSpaceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeTYPEEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyProcedureBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//Procedure:
		//	"procedure" name=PROC_NAME params+=ProcedureParameter* " ==> " type=TYPE ":" body=ProcedureBody;
		public ParserRule getRule() { return rule; }

		//"procedure" name=PROC_NAME params+=ProcedureParameter* " ==> " type=TYPE ":" body=ProcedureBody
		public Group getGroup() { return cGroup; }

		//"procedure"
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }

		//name=PROC_NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//PROC_NAME
		public RuleCall getNamePROC_NAMETerminalRuleCall_1_0() { return cNamePROC_NAMETerminalRuleCall_1_0; }

		//params+=ProcedureParameter*
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }

		//ProcedureParameter
		public RuleCall getParamsProcedureParameterParserRuleCall_2_0() { return cParamsProcedureParameterParserRuleCall_2_0; }

		//" ==> "
		public Keyword getSpaceEqualsSignEqualsSignGreaterThanSignSpaceKeyword_3() { return cSpaceEqualsSignEqualsSignGreaterThanSignSpaceKeyword_3; }

		//type=TYPE
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//TYPE
		public RuleCall getTypeTYPEEnumRuleCall_4_0() { return cTypeTYPEEnumRuleCall_4_0; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//body=ProcedureBody
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//ProcedureBody
		public RuleCall getBodyProcedureBodyParserRuleCall_6_0() { return cBodyProcedureBodyParserRuleCall_6_0; }
	}

	public class ProcedureParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVAR_NAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSpaceEqualsSignGreaterThanSignSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTYPEEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ProcedureParameter:
		//	"!" name=VAR_NAME " => " type=TYPE;
		public ParserRule getRule() { return rule; }

		//"!" name=VAR_NAME " => " type=TYPE
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//name=VAR_NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//VAR_NAME
		public RuleCall getNameVAR_NAMETerminalRuleCall_1_0() { return cNameVAR_NAMETerminalRuleCall_1_0; }

		//" => "
		public Keyword getSpaceEqualsSignGreaterThanSignSpaceKeyword_2() { return cSpaceEqualsSignGreaterThanSignSpaceKeyword_2; }

		//type=TYPE
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TYPE
		public RuleCall getTypeTYPEEnumRuleCall_3_0() { return cTypeTYPEEnumRuleCall_3_0; }
	}

	public class ProcedureBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueSeleniumTypeCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueSeleniumTypeVAR_NAMETerminalRuleCall_2_0_1 = (RuleCall)cValueSeleniumTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cArrayAccessAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArrayAccessArrayAccessParserRuleCall_3_0 = (RuleCall)cArrayAccessAssignment_3.eContents().get(0);
		
		//ProcedureBody:
		//	statements+=Statement* "return" value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
		public ParserRule getRule() { return rule; }

		//statements+=Statement* "return" value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?
		public Group getGroup() { return cGroup; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//value=[SeleniumType|VAR_NAME]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getValueSeleniumTypeCrossReference_2_0() { return cValueSeleniumTypeCrossReference_2_0; }

		//VAR_NAME
		public RuleCall getValueSeleniumTypeVAR_NAMETerminalRuleCall_2_0_1() { return cValueSeleniumTypeVAR_NAMETerminalRuleCall_2_0_1; }

		//arrayAccess=ArrayAccess?
		public Assignment getArrayAccessAssignment_3() { return cArrayAccessAssignment_3; }

		//ArrayAccess
		public RuleCall getArrayAccessArrayAccessParserRuleCall_3_0() { return cArrayAccessArrayAccessParserRuleCall_3_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCallNativeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFindMultipleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	VariableDeclaration | CallNative | FindMultiple;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration | CallNative | FindMultiple
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//CallNative
		public RuleCall getCallNativeParserRuleCall_1() { return cCallNativeParserRuleCall_1; }

		//FindMultiple
		public RuleCall getFindMultipleParserRuleCall_2() { return cFindMultipleParserRuleCall_2; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cProcedureCallParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cCallNativeWithResultParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		
		//VariableDeclaration:
		//	(ProcedureCall | Operation | CallNativeWithResult) ":" variable=Variable;
		public ParserRule getRule() { return rule; }

		//(ProcedureCall | Operation | CallNativeWithResult) ":" variable=Variable
		public Group getGroup() { return cGroup; }

		//ProcedureCall | Operation | CallNativeWithResult
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ProcedureCall
		public RuleCall getProcedureCallParserRuleCall_0_0() { return cProcedureCallParserRuleCall_0_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_0_1() { return cOperationParserRuleCall_0_1; }

		//CallNativeWithResult
		public RuleCall getCallNativeWithResultParserRuleCall_0_2() { return cCallNativeWithResultParserRuleCall_0_2; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//variable=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
	}

	public class FindMultipleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FindMultiple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindMultipleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropPROPERTYEnumRuleCall_2_0 = (RuleCall)cPropAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueSeleniumTypeCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1 = (RuleCall)cValueSeleniumTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cArrayAccessAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArrayAccessArrayAccessParserRuleCall_4_0 = (RuleCall)cArrayAccessAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cArrayAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cArrayArrayParserRuleCall_6_0 = (RuleCall)cArrayAssignment_6.eContents().get(0);
		
		//FindMultiple:
		//	"findMultiple" "by" prop=PROPERTY value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess? ":" array=Array;
		public ParserRule getRule() { return rule; }

		//"findMultiple" "by" prop=PROPERTY value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess? ":" array=Array
		public Group getGroup() { return cGroup; }

		//"findMultiple"
		public Keyword getFindMultipleKeyword_0() { return cFindMultipleKeyword_0; }

		//"by"
		public Keyword getByKeyword_1() { return cByKeyword_1; }

		//prop=PROPERTY
		public Assignment getPropAssignment_2() { return cPropAssignment_2; }

		//PROPERTY
		public RuleCall getPropPROPERTYEnumRuleCall_2_0() { return cPropPROPERTYEnumRuleCall_2_0; }

		//value=[SeleniumType|VAR_NAME]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getValueSeleniumTypeCrossReference_3_0() { return cValueSeleniumTypeCrossReference_3_0; }

		//VAR_NAME
		public RuleCall getValueSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1() { return cValueSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1; }

		//arrayAccess=ArrayAccess?
		public Assignment getArrayAccessAssignment_4() { return cArrayAccessAssignment_4; }

		//ArrayAccess
		public RuleCall getArrayAccessArrayAccessParserRuleCall_4_0() { return cArrayAccessArrayAccessParserRuleCall_4_0; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//array=Array
		public Assignment getArrayAssignment_6() { return cArrayAssignment_6; }

		//Array
		public RuleCall getArrayArrayParserRuleCall_6_0() { return cArrayArrayParserRuleCall_6_0; }
	}

	public class ProcedureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcedureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcProcedureCrossReference_1_0 = (CrossReference)cProcAssignment_1.eContents().get(0);
		private final RuleCall cProcProcedurePROC_NAMETerminalRuleCall_1_0_1 = (RuleCall)cProcProcedureCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExclamationMarkKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cParamsSeleniumTypeCrossReference_2_1_0 = (CrossReference)cParamsAssignment_2_1.eContents().get(0);
		private final RuleCall cParamsSeleniumTypeVAR_NAMETerminalRuleCall_2_1_0_1 = (RuleCall)cParamsSeleniumTypeCrossReference_2_1_0.eContents().get(1);
		private final Assignment cArrayAccessAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cArrayAccessArrayAccessParserRuleCall_2_2_0 = (RuleCall)cArrayAccessAssignment_2_2.eContents().get(0);
		
		//ProcedureCall:
		//	"call" proc=[Procedure|PROC_NAME] ("!" params+=[SeleniumType|VAR_NAME] arrayAccess+=ArrayAccess?)*;
		public ParserRule getRule() { return rule; }

		//"call" proc=[Procedure|PROC_NAME] ("!" params+=[SeleniumType|VAR_NAME] arrayAccess+=ArrayAccess?)*
		public Group getGroup() { return cGroup; }

		//"call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }

		//proc=[Procedure|PROC_NAME]
		public Assignment getProcAssignment_1() { return cProcAssignment_1; }

		//[Procedure|PROC_NAME]
		public CrossReference getProcProcedureCrossReference_1_0() { return cProcProcedureCrossReference_1_0; }

		//PROC_NAME
		public RuleCall getProcProcedurePROC_NAMETerminalRuleCall_1_0_1() { return cProcProcedurePROC_NAMETerminalRuleCall_1_0_1; }

		//("!" params+=[SeleniumType|VAR_NAME] arrayAccess+=ArrayAccess?)*
		public Group getGroup_2() { return cGroup_2; }

		//"!"
		public Keyword getExclamationMarkKeyword_2_0() { return cExclamationMarkKeyword_2_0; }

		//params+=[SeleniumType|VAR_NAME]
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getParamsSeleniumTypeCrossReference_2_1_0() { return cParamsSeleniumTypeCrossReference_2_1_0; }

		//VAR_NAME
		public RuleCall getParamsSeleniumTypeVAR_NAMETerminalRuleCall_2_1_0_1() { return cParamsSeleniumTypeVAR_NAMETerminalRuleCall_2_1_0_1; }

		//arrayAccess+=ArrayAccess?
		public Assignment getArrayAccessAssignment_2_2() { return cArrayAccessAssignment_2_2; }

		//ArrayAccess
		public RuleCall getArrayAccessArrayAccessParserRuleCall_2_2_0() { return cArrayAccessArrayAccessParserRuleCall_2_2_0; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStrvalueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStrvalueSTRINGTerminalRuleCall_0_0 = (RuleCall)cStrvalueAssignment_0.eContents().get(0);
		private final Assignment cIntvalueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntvalueINTTerminalRuleCall_1_0 = (RuleCall)cIntvalueAssignment_1.eContents().get(0);
		
		//Operation:
		//	strvalue=STRING | intvalue=INT;
		public ParserRule getRule() { return rule; }

		//strvalue=STRING | intvalue=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//strvalue=STRING
		public Assignment getStrvalueAssignment_0() { return cStrvalueAssignment_0; }

		//STRING
		public RuleCall getStrvalueSTRINGTerminalRuleCall_0_0() { return cStrvalueSTRINGTerminalRuleCall_0_0; }

		//intvalue=INT
		public Assignment getIntvalueAssignment_1() { return cIntvalueAssignment_1; }

		//INT
		public RuleCall getIntvalueINTTerminalRuleCall_1_0() { return cIntvalueINTTerminalRuleCall_1_0; }
	}

	public class CallNativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallNative");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCloseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFillParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClickParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVerifyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cShowParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cShowMultipleParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//CallNative:
		//	Open | Close | Go | Fill | Click | Verify | Show | ShowMultiple;
		public ParserRule getRule() { return rule; }

		//Open | Close | Go | Fill | Click | Verify | Show | ShowMultiple
		public Alternatives getAlternatives() { return cAlternatives; }

		//Open
		public RuleCall getOpenParserRuleCall_0() { return cOpenParserRuleCall_0; }

		//Close
		public RuleCall getCloseParserRuleCall_1() { return cCloseParserRuleCall_1; }

		//Go
		public RuleCall getGoParserRuleCall_2() { return cGoParserRuleCall_2; }

		//Fill
		public RuleCall getFillParserRuleCall_3() { return cFillParserRuleCall_3; }

		//Click
		public RuleCall getClickParserRuleCall_4() { return cClickParserRuleCall_4; }

		//Verify
		public RuleCall getVerifyParserRuleCall_5() { return cVerifyParserRuleCall_5; }

		//Show
		public RuleCall getShowParserRuleCall_6() { return cShowParserRuleCall_6; }

		//ShowMultiple
		public RuleCall getShowMultipleParserRuleCall_7() { return cShowMultipleParserRuleCall_7; }
	}

	public class CallNativeWithResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CallNativeWithResult");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFindParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//CallNativeWithResult:
		//	Find | Get | Len;
		public ParserRule getRule() { return rule; }

		//Find | Get | Len
		public Alternatives getAlternatives() { return cAlternatives; }

		//Find
		public RuleCall getFindParserRuleCall_0() { return cFindParserRuleCall_0; }

		//Get
		public RuleCall getGetParserRuleCall_1() { return cGetParserRuleCall_1; }

		//Len
		public RuleCall getLenParserRuleCall_2() { return cLenParserRuleCall_2; }
	}

	public class OpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Open");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBrowserAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBrowserBROWSEREnumRuleCall_1_0 = (RuleCall)cBrowserAssignment_1.eContents().get(0);
		
		//Open:
		//	"open" browser=BROWSER;
		public ParserRule getRule() { return rule; }

		//"open" browser=BROWSER
		public Group getGroup() { return cGroup; }

		//"open"
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }

		//browser=BROWSER
		public Assignment getBrowserAssignment_1() { return cBrowserAssignment_1; }

		//BROWSER
		public RuleCall getBrowserBROWSEREnumRuleCall_1_0() { return cBrowserBROWSEREnumRuleCall_1_0; }
	}

	public class CloseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Close");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCloseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBrowserAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBrowserBROWSEREnumRuleCall_1_0 = (RuleCall)cBrowserAssignment_1.eContents().get(0);
		
		//Close:
		//	"close" browser=BROWSER;
		public ParserRule getRule() { return rule; }

		//"close" browser=BROWSER
		public Group getGroup() { return cGroup; }

		//"close"
		public Keyword getCloseKeyword_0() { return cCloseKeyword_0; }

		//browser=BROWSER
		public Assignment getBrowserAssignment_1() { return cBrowserAssignment_1; }

		//BROWSER
		public RuleCall getBrowserBROWSEREnumRuleCall_1_0() { return cBrowserBROWSEREnumRuleCall_1_0; }
	}

	public class GoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Go");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLocationSeleniumTypeCrossReference_1_0 = (CrossReference)cLocationAssignment_1.eContents().get(0);
		private final RuleCall cLocationSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1 = (RuleCall)cLocationSeleniumTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cArrayAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArrayAccessArrayAccessParserRuleCall_2_0 = (RuleCall)cArrayAccessAssignment_2.eContents().get(0);
		
		//Go:
		//	"go" location=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
		public ParserRule getRule() { return rule; }

		//"go" location=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?
		public Group getGroup() { return cGroup; }

		//"go"
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }

		//location=[SeleniumType|VAR_NAME]
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getLocationSeleniumTypeCrossReference_1_0() { return cLocationSeleniumTypeCrossReference_1_0; }

		//VAR_NAME
		public RuleCall getLocationSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1() { return cLocationSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1; }

		//arrayAccess=ArrayAccess?
		public Assignment getArrayAccessAssignment_2() { return cArrayAccessAssignment_2; }

		//ArrayAccess
		public RuleCall getArrayAccessArrayAccessParserRuleCall_2_0() { return cArrayAccessArrayAccessParserRuleCall_2_0; }
	}

	public class FindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Find");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropPROPERTYEnumRuleCall_2_0 = (RuleCall)cPropAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueSeleniumTypeCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1 = (RuleCall)cValueSeleniumTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cArrayAccessAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArrayAccessArrayAccessParserRuleCall_4_0 = (RuleCall)cArrayAccessAssignment_4.eContents().get(0);
		
		//Find:
		//	"find" "by" prop=PROPERTY value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
		public ParserRule getRule() { return rule; }

		//"find" "by" prop=PROPERTY value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?
		public Group getGroup() { return cGroup; }

		//"find"
		public Keyword getFindKeyword_0() { return cFindKeyword_0; }

		//"by"
		public Keyword getByKeyword_1() { return cByKeyword_1; }

		//prop=PROPERTY
		public Assignment getPropAssignment_2() { return cPropAssignment_2; }

		//PROPERTY
		public RuleCall getPropPROPERTYEnumRuleCall_2_0() { return cPropPROPERTYEnumRuleCall_2_0; }

		//value=[SeleniumType|VAR_NAME]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getValueSeleniumTypeCrossReference_3_0() { return cValueSeleniumTypeCrossReference_3_0; }

		//VAR_NAME
		public RuleCall getValueSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1() { return cValueSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1; }

		//arrayAccess=ArrayAccess?
		public Assignment getArrayAccessAssignment_4() { return cArrayAccessAssignment_4; }

		//ArrayAccess
		public RuleCall getArrayAccessArrayAccessParserRuleCall_4_0() { return cArrayAccessArrayAccessParserRuleCall_4_0; }
	}

	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElemSeleniumTypeCrossReference_1_0 = (CrossReference)cElemAssignment_1.eContents().get(0);
		private final RuleCall cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1 = (RuleCall)cElemSeleniumTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueSeleniumTypeCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1 = (RuleCall)cValueSeleniumTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cArrayAccessAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArrayAccessArrayAccessParserRuleCall_4_0 = (RuleCall)cArrayAccessAssignment_4.eContents().get(0);
		
		//Fill:
		//	"fill" elem=[SeleniumType|VAR_NAME] "with" value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
		public ParserRule getRule() { return rule; }

		//"fill" elem=[SeleniumType|VAR_NAME] "with" value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?
		public Group getGroup() { return cGroup; }

		//"fill"
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }

		//elem=[SeleniumType|VAR_NAME]
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getElemSeleniumTypeCrossReference_1_0() { return cElemSeleniumTypeCrossReference_1_0; }

		//VAR_NAME
		public RuleCall getElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1() { return cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//value=[SeleniumType|VAR_NAME]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getValueSeleniumTypeCrossReference_3_0() { return cValueSeleniumTypeCrossReference_3_0; }

		//VAR_NAME
		public RuleCall getValueSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1() { return cValueSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1; }

		//arrayAccess=ArrayAccess?
		public Assignment getArrayAccessAssignment_4() { return cArrayAccessAssignment_4; }

		//ArrayAccess
		public RuleCall getArrayAccessArrayAccessParserRuleCall_4_0() { return cArrayAccessArrayAccessParserRuleCall_4_0; }
	}

	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElemSeleniumTypeCrossReference_1_0 = (CrossReference)cElemAssignment_1.eContents().get(0);
		private final RuleCall cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1 = (RuleCall)cElemSeleniumTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cArrayAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArrayAccessArrayAccessParserRuleCall_2_0 = (RuleCall)cArrayAccessAssignment_2.eContents().get(0);
		
		//Click:
		//	"click" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
		public ParserRule getRule() { return rule; }

		//"click" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?
		public Group getGroup() { return cGroup; }

		//"click"
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }

		//elem=[SeleniumType|VAR_NAME]
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getElemSeleniumTypeCrossReference_1_0() { return cElemSeleniumTypeCrossReference_1_0; }

		//VAR_NAME
		public RuleCall getElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1() { return cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1; }

		//arrayAccess=ArrayAccess?
		public Assignment getArrayAccessAssignment_2() { return cArrayAccessAssignment_2; }

		//ArrayAccess
		public RuleCall getArrayAccessArrayAccessParserRuleCall_2_0() { return cArrayAccessArrayAccessParserRuleCall_2_0; }
	}

	public class VerifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Verify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElemSeleniumTypeCrossReference_1_0 = (CrossReference)cElemAssignment_1.eContents().get(0);
		private final RuleCall cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1 = (RuleCall)cElemSeleniumTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cLeftArrayAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftArrayAccessArrayAccessParserRuleCall_2_0 = (RuleCall)cLeftArrayAccessAssignment_2.eContents().get(0);
		private final Assignment cCompAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCompCOMPARATOREnumRuleCall_3_0 = (RuleCall)cCompAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cValueSeleniumTypeCrossReference_4_0 = (CrossReference)cValueAssignment_4.eContents().get(0);
		private final RuleCall cValueSeleniumTypeVAR_NAMETerminalRuleCall_4_0_1 = (RuleCall)cValueSeleniumTypeCrossReference_4_0.eContents().get(1);
		private final Assignment cRightArrayAccessAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightArrayAccessArrayAccessParserRuleCall_5_0 = (RuleCall)cRightArrayAccessAssignment_5.eContents().get(0);
		
		//Verify:
		//	"verify" elem=[SeleniumType|VAR_NAME] leftArrayAccess=ArrayAccess? comp=COMPARATOR value=[SeleniumType|VAR_NAME]
		//	rightArrayAccess=ArrayAccess?;
		public ParserRule getRule() { return rule; }

		//"verify" elem=[SeleniumType|VAR_NAME] leftArrayAccess=ArrayAccess? comp=COMPARATOR value=[SeleniumType|VAR_NAME]
		//rightArrayAccess=ArrayAccess?
		public Group getGroup() { return cGroup; }

		//"verify"
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }

		//elem=[SeleniumType|VAR_NAME]
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getElemSeleniumTypeCrossReference_1_0() { return cElemSeleniumTypeCrossReference_1_0; }

		//VAR_NAME
		public RuleCall getElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1() { return cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1; }

		//leftArrayAccess=ArrayAccess?
		public Assignment getLeftArrayAccessAssignment_2() { return cLeftArrayAccessAssignment_2; }

		//ArrayAccess
		public RuleCall getLeftArrayAccessArrayAccessParserRuleCall_2_0() { return cLeftArrayAccessArrayAccessParserRuleCall_2_0; }

		//comp=COMPARATOR
		public Assignment getCompAssignment_3() { return cCompAssignment_3; }

		//COMPARATOR
		public RuleCall getCompCOMPARATOREnumRuleCall_3_0() { return cCompCOMPARATOREnumRuleCall_3_0; }

		//value=[SeleniumType|VAR_NAME]
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getValueSeleniumTypeCrossReference_4_0() { return cValueSeleniumTypeCrossReference_4_0; }

		//VAR_NAME
		public RuleCall getValueSeleniumTypeVAR_NAMETerminalRuleCall_4_0_1() { return cValueSeleniumTypeVAR_NAMETerminalRuleCall_4_0_1; }

		//rightArrayAccess=ArrayAccess?
		public Assignment getRightArrayAccessAssignment_5() { return cRightArrayAccessAssignment_5; }

		//ArrayAccess
		public RuleCall getRightArrayAccessArrayAccessParserRuleCall_5_0() { return cRightArrayAccessArrayAccessParserRuleCall_5_0; }
	}

	public class ShowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Show");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElemSeleniumTypeCrossReference_1_0 = (CrossReference)cElemAssignment_1.eContents().get(0);
		private final RuleCall cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1 = (RuleCall)cElemSeleniumTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cArrayAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArrayAccessArrayAccessParserRuleCall_2_0 = (RuleCall)cArrayAccessAssignment_2.eContents().get(0);
		
		//Show:
		//	"show" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
		public ParserRule getRule() { return rule; }

		//"show" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?
		public Group getGroup() { return cGroup; }

		//"show"
		public Keyword getShowKeyword_0() { return cShowKeyword_0; }

		//elem=[SeleniumType|VAR_NAME]
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getElemSeleniumTypeCrossReference_1_0() { return cElemSeleniumTypeCrossReference_1_0; }

		//VAR_NAME
		public RuleCall getElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1() { return cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1; }

		//arrayAccess=ArrayAccess?
		public Assignment getArrayAccessAssignment_2() { return cArrayAccessAssignment_2; }

		//ArrayAccess
		public RuleCall getArrayAccessArrayAccessParserRuleCall_2_0() { return cArrayAccessArrayAccessParserRuleCall_2_0; }
	}

	public class ShowMultipleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShowMultiple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShowMultipleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElemSeleniumTypeCrossReference_1_0 = (CrossReference)cElemAssignment_1.eContents().get(0);
		private final RuleCall cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1 = (RuleCall)cElemSeleniumTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cArrayAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArrayAccessArrayAccessParserRuleCall_2_0 = (RuleCall)cArrayAccessAssignment_2.eContents().get(0);
		
		//ShowMultiple:
		//	"showMultiple" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
		public ParserRule getRule() { return rule; }

		//"showMultiple" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?
		public Group getGroup() { return cGroup; }

		//"showMultiple"
		public Keyword getShowMultipleKeyword_0() { return cShowMultipleKeyword_0; }

		//elem=[SeleniumType|VAR_NAME]
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getElemSeleniumTypeCrossReference_1_0() { return cElemSeleniumTypeCrossReference_1_0; }

		//VAR_NAME
		public RuleCall getElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1() { return cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1; }

		//arrayAccess=ArrayAccess?
		public Assignment getArrayAccessAssignment_2() { return cArrayAccessAssignment_2; }

		//ArrayAccess
		public RuleCall getArrayAccessArrayAccessParserRuleCall_2_0() { return cArrayAccessArrayAccessParserRuleCall_2_0; }
	}

	public class GetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Get");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPropAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropPROPERTYEnumRuleCall_1_0 = (RuleCall)cPropAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cElemSeleniumTypeCrossReference_3_0 = (CrossReference)cElemAssignment_3.eContents().get(0);
		private final RuleCall cElemSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1 = (RuleCall)cElemSeleniumTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cArrayAccessAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArrayAccessArrayAccessParserRuleCall_4_0 = (RuleCall)cArrayAccessAssignment_4.eContents().get(0);
		
		//Get:
		//	"get" prop=PROPERTY "from" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
		public ParserRule getRule() { return rule; }

		//"get" prop=PROPERTY "from" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?
		public Group getGroup() { return cGroup; }

		//"get"
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }

		//prop=PROPERTY
		public Assignment getPropAssignment_1() { return cPropAssignment_1; }

		//PROPERTY
		public RuleCall getPropPROPERTYEnumRuleCall_1_0() { return cPropPROPERTYEnumRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//elem=[SeleniumType|VAR_NAME]
		public Assignment getElemAssignment_3() { return cElemAssignment_3; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getElemSeleniumTypeCrossReference_3_0() { return cElemSeleniumTypeCrossReference_3_0; }

		//VAR_NAME
		public RuleCall getElemSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1() { return cElemSeleniumTypeVAR_NAMETerminalRuleCall_3_0_1; }

		//arrayAccess=ArrayAccess?
		public Assignment getArrayAccessAssignment_4() { return cArrayAccessAssignment_4; }

		//ArrayAccess
		public RuleCall getArrayAccessArrayAccessParserRuleCall_4_0() { return cArrayAccessArrayAccessParserRuleCall_4_0; }
	}

	public class LenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Len");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElemSeleniumTypeCrossReference_1_0 = (CrossReference)cElemAssignment_1.eContents().get(0);
		private final RuleCall cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1 = (RuleCall)cElemSeleniumTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cArrayAccessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArrayAccessArrayAccessParserRuleCall_2_0 = (RuleCall)cArrayAccessAssignment_2.eContents().get(0);
		
		//Len:
		//	"len" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
		public ParserRule getRule() { return rule; }

		//"len" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?
		public Group getGroup() { return cGroup; }

		//"len"
		public Keyword getLenKeyword_0() { return cLenKeyword_0; }

		//elem=[SeleniumType|VAR_NAME]
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }

		//[SeleniumType|VAR_NAME]
		public CrossReference getElemSeleniumTypeCrossReference_1_0() { return cElemSeleniumTypeCrossReference_1_0; }

		//VAR_NAME
		public RuleCall getElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1() { return cElemSeleniumTypeVAR_NAMETerminalRuleCall_1_0_1; }

		//arrayAccess=ArrayAccess?
		public Assignment getArrayAccessAssignment_2() { return cArrayAccessAssignment_2; }

		//ArrayAccess
		public RuleCall getArrayAccessArrayAccessParserRuleCall_2_0() { return cArrayAccessArrayAccessParserRuleCall_2_0; }
	}

	public class SeleniumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeleniumType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SeleniumType:
		//	Variable | Array;
		public ParserRule getRule() { return rule; }

		//Variable | Array
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//Array
		public RuleCall getArrayParserRuleCall_1() { return cArrayParserRuleCall_1; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameVAR_NAMETerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=VAR_NAME;
		public ParserRule getRule() { return rule; }

		//name=VAR_NAME
		public Assignment getNameAssignment() { return cNameAssignment; }

		//VAR_NAME
		public RuleCall getNameVAR_NAMETerminalRuleCall_0() { return cNameVAR_NAMETerminalRuleCall_0; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVAR_NAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Array:
		//	name=VAR_NAME "[]";
		public ParserRule getRule() { return rule; }

		//name=VAR_NAME "[]"
		public Group getGroup() { return cGroup; }

		//name=VAR_NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//VAR_NAME
		public RuleCall getNameVAR_NAMETerminalRuleCall_0_0() { return cNameVAR_NAMETerminalRuleCall_0_0; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1() { return cLeftSquareBracketRightSquareBracketKeyword_1; }
	}

	public class ArrayAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdINTTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayAccess:
		//	"[" id=INT "]";
		public ParserRule getRule() { return rule; }

		//"[" id=INT "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//id=INT
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//INT
		public RuleCall getIdINTTerminalRuleCall_1_0() { return cIdINTTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	
	
	public class BROWSERElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BROWSER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFirefoxEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFirefoxFirefoxKeyword_0_0 = (Keyword)cFirefoxEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cChromeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cChromeChromeKeyword_1_0 = (Keyword)cChromeEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BROWSER:
		//	firefox | chrome;
		public EnumRule getRule() { return rule; }

		//firefox | chrome
		public Alternatives getAlternatives() { return cAlternatives; }

		//firefox
		public EnumLiteralDeclaration getFirefoxEnumLiteralDeclaration_0() { return cFirefoxEnumLiteralDeclaration_0; }

		//"firefox"
		public Keyword getFirefoxFirefoxKeyword_0_0() { return cFirefoxFirefoxKeyword_0_0; }

		//chrome
		public EnumLiteralDeclaration getChromeEnumLiteralDeclaration_1() { return cChromeEnumLiteralDeclaration_1; }

		//"chrome"
		public Keyword getChromeChromeKeyword_1_0() { return cChromeChromeKeyword_1_0; }
	}

	public class PROPERTYElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PROPERTY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cByclassnameEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cByclassnameClassKeyword_0_0 = (Keyword)cByclassnameEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cByidEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cByidIdKeyword_1_0 = (Keyword)cByidEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBycssEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBycssCssSelectorKeyword_2_0 = (Keyword)cBycssEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cByxpathEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cByxpathXpathKeyword_3_0 = (Keyword)cByxpathEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBynameEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBynameNameKeyword_4_0 = (Keyword)cBynameEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBytagEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBytagTagNameKeyword_5_0 = (Keyword)cBytagEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum PROPERTY:
		//	byclassname="class" | byid="id" | bycss="cssSelector" | byxpath="xpath" | byname="name" | bytag="tagName";
		public EnumRule getRule() { return rule; }

		//byclassname="class" | byid="id" | bycss="cssSelector" | byxpath="xpath" | byname="name" | bytag="tagName"
		public Alternatives getAlternatives() { return cAlternatives; }

		//byclassname="class"
		public EnumLiteralDeclaration getByclassnameEnumLiteralDeclaration_0() { return cByclassnameEnumLiteralDeclaration_0; }

		//"class"
		public Keyword getByclassnameClassKeyword_0_0() { return cByclassnameClassKeyword_0_0; }

		//byid="id"
		public EnumLiteralDeclaration getByidEnumLiteralDeclaration_1() { return cByidEnumLiteralDeclaration_1; }

		//"id"
		public Keyword getByidIdKeyword_1_0() { return cByidIdKeyword_1_0; }

		//bycss="cssSelector"
		public EnumLiteralDeclaration getBycssEnumLiteralDeclaration_2() { return cBycssEnumLiteralDeclaration_2; }

		//"cssSelector"
		public Keyword getBycssCssSelectorKeyword_2_0() { return cBycssCssSelectorKeyword_2_0; }

		//byxpath="xpath"
		public EnumLiteralDeclaration getByxpathEnumLiteralDeclaration_3() { return cByxpathEnumLiteralDeclaration_3; }

		//"xpath"
		public Keyword getByxpathXpathKeyword_3_0() { return cByxpathXpathKeyword_3_0; }

		//byname="name"
		public EnumLiteralDeclaration getBynameEnumLiteralDeclaration_4() { return cBynameEnumLiteralDeclaration_4; }

		//"name"
		public Keyword getBynameNameKeyword_4_0() { return cBynameNameKeyword_4_0; }

		//bytag="tagName"
		public EnumLiteralDeclaration getBytagEnumLiteralDeclaration_5() { return cBytagEnumLiteralDeclaration_5; }

		//"tagName"
		public Keyword getBytagTagNameKeyword_5_0() { return cBytagTagNameKeyword_5_0; }
	}

	public class COMPARATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "COMPARATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualsEqualsKeyword_0_0 = (Keyword)cEqualsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cContainsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cContainsContainsKeyword_1_0 = (Keyword)cContainsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDifferentEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDifferentDifferentKeyword_2_0 = (Keyword)cDifferentEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterGreaterKeyword_3_0 = (Keyword)cGreaterEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLowerEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLowerLowerKeyword_4_0 = (Keyword)cLowerEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cStartsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cStartsStartsKeyword_5_0 = (Keyword)cStartsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cEndsEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cEndsEndsKeyword_6_0 = (Keyword)cEndsEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum COMPARATOR:
		//	equals | contains | different | greater | lower | starts | ends;
		public EnumRule getRule() { return rule; }

		//equals | contains | different | greater | lower | starts | ends
		public Alternatives getAlternatives() { return cAlternatives; }

		//equals
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_0() { return cEqualsEnumLiteralDeclaration_0; }

		//"equals"
		public Keyword getEqualsEqualsKeyword_0_0() { return cEqualsEqualsKeyword_0_0; }

		//contains
		public EnumLiteralDeclaration getContainsEnumLiteralDeclaration_1() { return cContainsEnumLiteralDeclaration_1; }

		//"contains"
		public Keyword getContainsContainsKeyword_1_0() { return cContainsContainsKeyword_1_0; }

		//different
		public EnumLiteralDeclaration getDifferentEnumLiteralDeclaration_2() { return cDifferentEnumLiteralDeclaration_2; }

		//"different"
		public Keyword getDifferentDifferentKeyword_2_0() { return cDifferentDifferentKeyword_2_0; }

		//greater
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_3() { return cGreaterEnumLiteralDeclaration_3; }

		//"greater"
		public Keyword getGreaterGreaterKeyword_3_0() { return cGreaterGreaterKeyword_3_0; }

		//lower
		public EnumLiteralDeclaration getLowerEnumLiteralDeclaration_4() { return cLowerEnumLiteralDeclaration_4; }

		//"lower"
		public Keyword getLowerLowerKeyword_4_0() { return cLowerLowerKeyword_4_0; }

		//starts
		public EnumLiteralDeclaration getStartsEnumLiteralDeclaration_5() { return cStartsEnumLiteralDeclaration_5; }

		//"starts"
		public Keyword getStartsStartsKeyword_5_0() { return cStartsStartsKeyword_5_0; }

		//ends
		public EnumLiteralDeclaration getEndsEnumLiteralDeclaration_6() { return cEndsEnumLiteralDeclaration_6; }

		//"ends"
		public Keyword getEndsEndsKeyword_6_0() { return cEndsEndsKeyword_6_0; }
	}

	public class TYPEElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWebelementEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWebelementElementKeyword_2_0 = (Keyword)cWebelementEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cArrayEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cArrayElementKeyword_3_0 = (Keyword)cArrayEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TYPE:
		//	string | integer | webelement="element" | array="element[]";
		public EnumRule getRule() { return rule; }

		//string | integer | webelement="element" | array="element[]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }

		//"string"
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }

		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }

		//webelement="element"
		public EnumLiteralDeclaration getWebelementEnumLiteralDeclaration_2() { return cWebelementEnumLiteralDeclaration_2; }

		//"element"
		public Keyword getWebelementElementKeyword_2_0() { return cWebelementElementKeyword_2_0; }

		//array="element[]"
		public EnumLiteralDeclaration getArrayEnumLiteralDeclaration_3() { return cArrayEnumLiteralDeclaration_3; }

		//"element[]"
		public Keyword getArrayElementKeyword_3_0() { return cArrayElementKeyword_3_0; }
	}
	
	private ModelElements pModel;
	private ProgramElements pProgram;
	private ProcedureElements pProcedure;
	private ProcedureParameterElements pProcedureParameter;
	private ProcedureBodyElements pProcedureBody;
	private StatementElements pStatement;
	private VariableDeclarationElements pVariableDeclaration;
	private FindMultipleElements pFindMultiple;
	private ProcedureCallElements pProcedureCall;
	private OperationElements pOperation;
	private CallNativeElements pCallNative;
	private CallNativeWithResultElements pCallNativeWithResult;
	private OpenElements pOpen;
	private CloseElements pClose;
	private GoElements pGo;
	private FindElements pFind;
	private FillElements pFill;
	private ClickElements pClick;
	private VerifyElements pVerify;
	private ShowElements pShow;
	private ShowMultipleElements pShowMultiple;
	private GetElements pGet;
	private LenElements pLen;
	private SeleniumTypeElements pSeleniumType;
	private VariableElements pVariable;
	private ArrayElements pArray;
	private ArrayAccessElements pArrayAccess;
	private BROWSERElements unknownRuleBROWSER;
	private PROPERTYElements unknownRulePROPERTY;
	private COMPARATORElements unknownRuleCOMPARATOR;
	private TYPEElements unknownRuleTYPE;
	private TerminalRule tVAR_NAME;
	private TerminalRule tPROC_NAME;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SeleniumGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.imta.tp.selenium.Selenium".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	program=Program;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Program:
	//	procedures+=Procedure* "execute" ":" statements+=Statement+;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Procedure:
	//	"procedure" name=PROC_NAME params+=ProcedureParameter* " ==> " type=TYPE ":" body=ProcedureBody;
	public ProcedureElements getProcedureAccess() {
		return (pProcedure != null) ? pProcedure : (pProcedure = new ProcedureElements());
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//ProcedureParameter:
	//	"!" name=VAR_NAME " => " type=TYPE;
	public ProcedureParameterElements getProcedureParameterAccess() {
		return (pProcedureParameter != null) ? pProcedureParameter : (pProcedureParameter = new ProcedureParameterElements());
	}
	
	public ParserRule getProcedureParameterRule() {
		return getProcedureParameterAccess().getRule();
	}

	//ProcedureBody:
	//	statements+=Statement* "return" value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
	public ProcedureBodyElements getProcedureBodyAccess() {
		return (pProcedureBody != null) ? pProcedureBody : (pProcedureBody = new ProcedureBodyElements());
	}
	
	public ParserRule getProcedureBodyRule() {
		return getProcedureBodyAccess().getRule();
	}

	//Statement:
	//	VariableDeclaration | CallNative | FindMultiple;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//VariableDeclaration:
	//	(ProcedureCall | Operation | CallNativeWithResult) ":" variable=Variable;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//FindMultiple:
	//	"findMultiple" "by" prop=PROPERTY value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess? ":" array=Array;
	public FindMultipleElements getFindMultipleAccess() {
		return (pFindMultiple != null) ? pFindMultiple : (pFindMultiple = new FindMultipleElements());
	}
	
	public ParserRule getFindMultipleRule() {
		return getFindMultipleAccess().getRule();
	}

	//ProcedureCall:
	//	"call" proc=[Procedure|PROC_NAME] ("!" params+=[SeleniumType|VAR_NAME] arrayAccess+=ArrayAccess?)*;
	public ProcedureCallElements getProcedureCallAccess() {
		return (pProcedureCall != null) ? pProcedureCall : (pProcedureCall = new ProcedureCallElements());
	}
	
	public ParserRule getProcedureCallRule() {
		return getProcedureCallAccess().getRule();
	}

	//Operation:
	//	strvalue=STRING | intvalue=INT;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//CallNative:
	//	Open | Close | Go | Fill | Click | Verify | Show | ShowMultiple;
	public CallNativeElements getCallNativeAccess() {
		return (pCallNative != null) ? pCallNative : (pCallNative = new CallNativeElements());
	}
	
	public ParserRule getCallNativeRule() {
		return getCallNativeAccess().getRule();
	}

	//CallNativeWithResult:
	//	Find | Get | Len;
	public CallNativeWithResultElements getCallNativeWithResultAccess() {
		return (pCallNativeWithResult != null) ? pCallNativeWithResult : (pCallNativeWithResult = new CallNativeWithResultElements());
	}
	
	public ParserRule getCallNativeWithResultRule() {
		return getCallNativeWithResultAccess().getRule();
	}

	//Open:
	//	"open" browser=BROWSER;
	public OpenElements getOpenAccess() {
		return (pOpen != null) ? pOpen : (pOpen = new OpenElements());
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}

	//Close:
	//	"close" browser=BROWSER;
	public CloseElements getCloseAccess() {
		return (pClose != null) ? pClose : (pClose = new CloseElements());
	}
	
	public ParserRule getCloseRule() {
		return getCloseAccess().getRule();
	}

	//Go:
	//	"go" location=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
	public GoElements getGoAccess() {
		return (pGo != null) ? pGo : (pGo = new GoElements());
	}
	
	public ParserRule getGoRule() {
		return getGoAccess().getRule();
	}

	//Find:
	//	"find" "by" prop=PROPERTY value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
	public FindElements getFindAccess() {
		return (pFind != null) ? pFind : (pFind = new FindElements());
	}
	
	public ParserRule getFindRule() {
		return getFindAccess().getRule();
	}

	//Fill:
	//	"fill" elem=[SeleniumType|VAR_NAME] "with" value=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
	public FillElements getFillAccess() {
		return (pFill != null) ? pFill : (pFill = new FillElements());
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}

	//Click:
	//	"click" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
	public ClickElements getClickAccess() {
		return (pClick != null) ? pClick : (pClick = new ClickElements());
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}

	//Verify:
	//	"verify" elem=[SeleniumType|VAR_NAME] leftArrayAccess=ArrayAccess? comp=COMPARATOR value=[SeleniumType|VAR_NAME]
	//	rightArrayAccess=ArrayAccess?;
	public VerifyElements getVerifyAccess() {
		return (pVerify != null) ? pVerify : (pVerify = new VerifyElements());
	}
	
	public ParserRule getVerifyRule() {
		return getVerifyAccess().getRule();
	}

	//Show:
	//	"show" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
	public ShowElements getShowAccess() {
		return (pShow != null) ? pShow : (pShow = new ShowElements());
	}
	
	public ParserRule getShowRule() {
		return getShowAccess().getRule();
	}

	//ShowMultiple:
	//	"showMultiple" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
	public ShowMultipleElements getShowMultipleAccess() {
		return (pShowMultiple != null) ? pShowMultiple : (pShowMultiple = new ShowMultipleElements());
	}
	
	public ParserRule getShowMultipleRule() {
		return getShowMultipleAccess().getRule();
	}

	//Get:
	//	"get" prop=PROPERTY "from" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
	public GetElements getGetAccess() {
		return (pGet != null) ? pGet : (pGet = new GetElements());
	}
	
	public ParserRule getGetRule() {
		return getGetAccess().getRule();
	}

	//Len:
	//	"len" elem=[SeleniumType|VAR_NAME] arrayAccess=ArrayAccess?;
	public LenElements getLenAccess() {
		return (pLen != null) ? pLen : (pLen = new LenElements());
	}
	
	public ParserRule getLenRule() {
		return getLenAccess().getRule();
	}

	//SeleniumType:
	//	Variable | Array;
	public SeleniumTypeElements getSeleniumTypeAccess() {
		return (pSeleniumType != null) ? pSeleniumType : (pSeleniumType = new SeleniumTypeElements());
	}
	
	public ParserRule getSeleniumTypeRule() {
		return getSeleniumTypeAccess().getRule();
	}

	//Variable:
	//	name=VAR_NAME;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Array:
	//	name=VAR_NAME "[]";
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//ArrayAccess:
	//	"[" id=INT "]";
	public ArrayAccessElements getArrayAccessAccess() {
		return (pArrayAccess != null) ? pArrayAccess : (pArrayAccess = new ArrayAccessElements());
	}
	
	public ParserRule getArrayAccessRule() {
		return getArrayAccessAccess().getRule();
	}

	//enum BROWSER:
	//	firefox | chrome;
	public BROWSERElements getBROWSERAccess() {
		return (unknownRuleBROWSER != null) ? unknownRuleBROWSER : (unknownRuleBROWSER = new BROWSERElements());
	}
	
	public EnumRule getBROWSERRule() {
		return getBROWSERAccess().getRule();
	}

	//enum PROPERTY:
	//	byclassname="class" | byid="id" | bycss="cssSelector" | byxpath="xpath" | byname="name" | bytag="tagName";
	public PROPERTYElements getPROPERTYAccess() {
		return (unknownRulePROPERTY != null) ? unknownRulePROPERTY : (unknownRulePROPERTY = new PROPERTYElements());
	}
	
	public EnumRule getPROPERTYRule() {
		return getPROPERTYAccess().getRule();
	}

	//enum COMPARATOR:
	//	equals | contains | different | greater | lower | starts | ends;
	public COMPARATORElements getCOMPARATORAccess() {
		return (unknownRuleCOMPARATOR != null) ? unknownRuleCOMPARATOR : (unknownRuleCOMPARATOR = new COMPARATORElements());
	}
	
	public EnumRule getCOMPARATORRule() {
		return getCOMPARATORAccess().getRule();
	}

	//enum TYPE:
	//	string | integer | webelement="element" | array="element[]";
	public TYPEElements getTYPEAccess() {
		return (unknownRuleTYPE != null) ? unknownRuleTYPE : (unknownRuleTYPE = new TYPEElements());
	}
	
	public EnumRule getTYPERule() {
		return getTYPEAccess().getRule();
	}

	//terminal VAR_NAME:
	//	"a".."z" ID?;
	public TerminalRule getVAR_NAMERule() {
		return (tVAR_NAME != null) ? tVAR_NAME : (tVAR_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VAR_NAME"));
	} 

	//terminal PROC_NAME:
	//	"A".."Z" ID?;
	public TerminalRule getPROC_NAMERule() {
		return (tPROC_NAME != null) ? tPROC_NAME : (tPROC_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PROC_NAME"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
