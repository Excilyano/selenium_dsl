/*
* generated by Xtext
*/
package fr.imta.tp.selenium.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import fr.imta.tp.selenium.services.SeleniumGrammarAccess;

public class SeleniumParser extends AbstractContentAssistParser {
	
	@Inject
	private SeleniumGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected fr.imta.tp.selenium.ui.contentassist.antlr.internal.InternalSeleniumParser createParser() {
		fr.imta.tp.selenium.ui.contentassist.antlr.internal.InternalSeleniumParser result = new fr.imta.tp.selenium.ui.contentassist.antlr.internal.InternalSeleniumParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getVariableDeclarationAccess().getAlternatives_0(), "rule__VariableDeclaration__Alternatives_0");
					put(grammarAccess.getOperationAccess().getAlternatives(), "rule__Operation__Alternatives");
					put(grammarAccess.getCallNativeAccess().getAlternatives(), "rule__CallNative__Alternatives");
					put(grammarAccess.getCallNativeWithResultAccess().getAlternatives(), "rule__CallNativeWithResult__Alternatives");
					put(grammarAccess.getSeleniumTypeAccess().getAlternatives(), "rule__SeleniumType__Alternatives");
					put(grammarAccess.getBROWSERAccess().getAlternatives(), "rule__BROWSER__Alternatives");
					put(grammarAccess.getPROPERTYAccess().getAlternatives(), "rule__PROPERTY__Alternatives");
					put(grammarAccess.getCOMPARATORAccess().getAlternatives(), "rule__COMPARATOR__Alternatives");
					put(grammarAccess.getTYPEAccess().getAlternatives(), "rule__TYPE__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getProcedureAccess().getGroup(), "rule__Procedure__Group__0");
					put(grammarAccess.getProcedureParameterAccess().getGroup(), "rule__ProcedureParameter__Group__0");
					put(grammarAccess.getProcedureBodyAccess().getGroup(), "rule__ProcedureBody__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getFindMultipleAccess().getGroup(), "rule__FindMultiple__Group__0");
					put(grammarAccess.getProcedureCallAccess().getGroup(), "rule__ProcedureCall__Group__0");
					put(grammarAccess.getProcedureCallAccess().getGroup_2(), "rule__ProcedureCall__Group_2__0");
					put(grammarAccess.getOpenAccess().getGroup(), "rule__Open__Group__0");
					put(grammarAccess.getCloseAccess().getGroup(), "rule__Close__Group__0");
					put(grammarAccess.getGoAccess().getGroup(), "rule__Go__Group__0");
					put(grammarAccess.getFindAccess().getGroup(), "rule__Find__Group__0");
					put(grammarAccess.getFillAccess().getGroup(), "rule__Fill__Group__0");
					put(grammarAccess.getClickAccess().getGroup(), "rule__Click__Group__0");
					put(grammarAccess.getVerifyAccess().getGroup(), "rule__Verify__Group__0");
					put(grammarAccess.getShowAccess().getGroup(), "rule__Show__Group__0");
					put(grammarAccess.getShowMultipleAccess().getGroup(), "rule__ShowMultiple__Group__0");
					put(grammarAccess.getGetAccess().getGroup(), "rule__Get__Group__0");
					put(grammarAccess.getLenAccess().getGroup(), "rule__Len__Group__0");
					put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
					put(grammarAccess.getArrayAccessAccess().getGroup(), "rule__ArrayAccess__Group__0");
					put(grammarAccess.getModelAccess().getProgramAssignment(), "rule__Model__ProgramAssignment");
					put(grammarAccess.getProgramAccess().getProceduresAssignment_0(), "rule__Program__ProceduresAssignment_0");
					put(grammarAccess.getProgramAccess().getStatementsAssignment_3(), "rule__Program__StatementsAssignment_3");
					put(grammarAccess.getProcedureAccess().getNameAssignment_1(), "rule__Procedure__NameAssignment_1");
					put(grammarAccess.getProcedureAccess().getParamsAssignment_2(), "rule__Procedure__ParamsAssignment_2");
					put(grammarAccess.getProcedureAccess().getTypeAssignment_4(), "rule__Procedure__TypeAssignment_4");
					put(grammarAccess.getProcedureAccess().getBodyAssignment_6(), "rule__Procedure__BodyAssignment_6");
					put(grammarAccess.getProcedureParameterAccess().getNameAssignment_1(), "rule__ProcedureParameter__NameAssignment_1");
					put(grammarAccess.getProcedureParameterAccess().getTypeAssignment_3(), "rule__ProcedureParameter__TypeAssignment_3");
					put(grammarAccess.getProcedureBodyAccess().getStatementsAssignment_0(), "rule__ProcedureBody__StatementsAssignment_0");
					put(grammarAccess.getProcedureBodyAccess().getValueAssignment_2(), "rule__ProcedureBody__ValueAssignment_2");
					put(grammarAccess.getProcedureBodyAccess().getArrayAccessAssignment_3(), "rule__ProcedureBody__ArrayAccessAssignment_3");
					put(grammarAccess.getVariableDeclarationAccess().getVariableAssignment_2(), "rule__VariableDeclaration__VariableAssignment_2");
					put(grammarAccess.getFindMultipleAccess().getPropAssignment_2(), "rule__FindMultiple__PropAssignment_2");
					put(grammarAccess.getFindMultipleAccess().getValueAssignment_3(), "rule__FindMultiple__ValueAssignment_3");
					put(grammarAccess.getFindMultipleAccess().getArrayAccessAssignment_4(), "rule__FindMultiple__ArrayAccessAssignment_4");
					put(grammarAccess.getFindMultipleAccess().getArrayAssignment_6(), "rule__FindMultiple__ArrayAssignment_6");
					put(grammarAccess.getProcedureCallAccess().getProcAssignment_1(), "rule__ProcedureCall__ProcAssignment_1");
					put(grammarAccess.getProcedureCallAccess().getParamsAssignment_2_1(), "rule__ProcedureCall__ParamsAssignment_2_1");
					put(grammarAccess.getProcedureCallAccess().getArrayAccessAssignment_2_2(), "rule__ProcedureCall__ArrayAccessAssignment_2_2");
					put(grammarAccess.getOperationAccess().getStrvalueAssignment_0(), "rule__Operation__StrvalueAssignment_0");
					put(grammarAccess.getOperationAccess().getIntvalueAssignment_1(), "rule__Operation__IntvalueAssignment_1");
					put(grammarAccess.getOpenAccess().getBrowserAssignment_1(), "rule__Open__BrowserAssignment_1");
					put(grammarAccess.getCloseAccess().getBrowserAssignment_1(), "rule__Close__BrowserAssignment_1");
					put(grammarAccess.getGoAccess().getLocationAssignment_1(), "rule__Go__LocationAssignment_1");
					put(grammarAccess.getGoAccess().getArrayAccessAssignment_2(), "rule__Go__ArrayAccessAssignment_2");
					put(grammarAccess.getFindAccess().getPropAssignment_2(), "rule__Find__PropAssignment_2");
					put(grammarAccess.getFindAccess().getValueAssignment_3(), "rule__Find__ValueAssignment_3");
					put(grammarAccess.getFindAccess().getArrayAccessAssignment_4(), "rule__Find__ArrayAccessAssignment_4");
					put(grammarAccess.getFillAccess().getElemAssignment_1(), "rule__Fill__ElemAssignment_1");
					put(grammarAccess.getFillAccess().getValueAssignment_3(), "rule__Fill__ValueAssignment_3");
					put(grammarAccess.getFillAccess().getArrayAccessAssignment_4(), "rule__Fill__ArrayAccessAssignment_4");
					put(grammarAccess.getClickAccess().getElemAssignment_1(), "rule__Click__ElemAssignment_1");
					put(grammarAccess.getClickAccess().getArrayAccessAssignment_2(), "rule__Click__ArrayAccessAssignment_2");
					put(grammarAccess.getVerifyAccess().getElemAssignment_1(), "rule__Verify__ElemAssignment_1");
					put(grammarAccess.getVerifyAccess().getLeftArrayAccessAssignment_2(), "rule__Verify__LeftArrayAccessAssignment_2");
					put(grammarAccess.getVerifyAccess().getCompAssignment_3(), "rule__Verify__CompAssignment_3");
					put(grammarAccess.getVerifyAccess().getValueAssignment_4(), "rule__Verify__ValueAssignment_4");
					put(grammarAccess.getVerifyAccess().getRightArrayAccessAssignment_5(), "rule__Verify__RightArrayAccessAssignment_5");
					put(grammarAccess.getShowAccess().getElemAssignment_1(), "rule__Show__ElemAssignment_1");
					put(grammarAccess.getShowAccess().getArrayAccessAssignment_2(), "rule__Show__ArrayAccessAssignment_2");
					put(grammarAccess.getShowMultipleAccess().getElemAssignment_1(), "rule__ShowMultiple__ElemAssignment_1");
					put(grammarAccess.getShowMultipleAccess().getArrayAccessAssignment_2(), "rule__ShowMultiple__ArrayAccessAssignment_2");
					put(grammarAccess.getGetAccess().getPropAssignment_1(), "rule__Get__PropAssignment_1");
					put(grammarAccess.getGetAccess().getElemAssignment_3(), "rule__Get__ElemAssignment_3");
					put(grammarAccess.getGetAccess().getArrayAccessAssignment_4(), "rule__Get__ArrayAccessAssignment_4");
					put(grammarAccess.getLenAccess().getElemAssignment_1(), "rule__Len__ElemAssignment_1");
					put(grammarAccess.getLenAccess().getArrayAccessAssignment_2(), "rule__Len__ArrayAccessAssignment_2");
					put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
					put(grammarAccess.getArrayAccess().getNameAssignment_0(), "rule__Array__NameAssignment_0");
					put(grammarAccess.getArrayAccessAccess().getIdAssignment_1(), "rule__ArrayAccess__IdAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			fr.imta.tp.selenium.ui.contentassist.antlr.internal.InternalSeleniumParser typedParser = (fr.imta.tp.selenium.ui.contentassist.antlr.internal.InternalSeleniumParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SeleniumGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SeleniumGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
