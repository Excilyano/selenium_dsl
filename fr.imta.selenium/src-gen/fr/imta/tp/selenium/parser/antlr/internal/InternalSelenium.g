/*
* generated by Xtext
*/
grammar InternalSelenium;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package fr.imta.tp.selenium.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.imta.tp.selenium.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.imta.tp.selenium.services.SeleniumGrammarAccess;

}

@parser::members {

 	private SeleniumGrammarAccess grammarAccess;
 	
    public InternalSeleniumParser(TokenStream input, SeleniumGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SeleniumGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProgramProgramParserRuleCall_0()); 
	    }
		lv_program_0_0=ruleProgram		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"program",
        		lv_program_0_0, 
        		"Program");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getProceduresProcedureParserRuleCall_0_0()); 
	    }
		lv_procedures_0_0=ruleProcedure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"procedures",
        		lv_procedures_0_0, 
        		"Procedure");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='execute' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProgramAccess().getExecuteKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProgramAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_3_0()); 
	    }
		lv_statements_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='procedure' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcedureAccess().getProcedureKeyword_0());
    }
(
(
		lv_name_1_0=RULE_PROC_NAME
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProcedureAccess().getNamePROC_NAMETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"PROC_NAME");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getParamsProcedureParameterParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleProcedureParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"ProcedureParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3=' ==> ' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcedureAccess().getSpaceEqualsSignEqualsSignGreaterThanSignSpaceKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getTypeTYPEEnumRuleCall_4_0()); 
	    }
		lv_type_4_0=ruleTYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProcedureAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getBodyProcedureBodyParserRuleCall_6_0()); 
	    }
		lv_body_6_0=ruleProcedureBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_6_0, 
        		"ProcedureBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProcedureParameter
entryRuleProcedureParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureParameterRule()); }
	 iv_ruleProcedureParameter=ruleProcedureParameter 
	 { $current=$iv_ruleProcedureParameter.current; } 
	 EOF 
;

// Rule ProcedureParameter
ruleProcedureParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcedureParameterAccess().getExclamationMarkKeyword_0());
    }
(
(
		lv_name_1_0=RULE_VAR_NAME
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProcedureParameterAccess().getNameVAR_NAMETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"VAR_NAME");
	    }

)
)	otherlv_2=' => ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcedureParameterAccess().getSpaceEqualsSignGreaterThanSignSpaceKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureParameterAccess().getTypeTYPEEnumRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleTYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProcedureBody
entryRuleProcedureBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureBodyRule()); }
	 iv_ruleProcedureBody=ruleProcedureBody 
	 { $current=$iv_ruleProcedureBody.current; } 
	 EOF 
;

// Rule ProcedureBody
ruleProcedureBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureBodyAccess().getStatementsStatementParserRuleCall_0_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureBodyRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcedureBodyAccess().getReturnKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureBodyRule());
	        }
        }
	otherlv_2=RULE_VAR_NAME
	{
		newLeafNode(otherlv_2, grammarAccess.getProcedureBodyAccess().getValueSeleniumTypeCrossReference_2_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureBodyAccess().getArrayAccessArrayAccessParserRuleCall_3_0()); 
	    }
		lv_arrayAccess_3_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureBodyRule());
	        }
       		set(
       			$current, 
       			"arrayAccess",
        		lv_arrayAccess_3_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_0()); 
    }
    this_VariableDeclaration_0=ruleVariableDeclaration
    { 
        $current = $this_VariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCallNativeParserRuleCall_1()); 
    }
    this_CallNative_1=ruleCallNative
    { 
        $current = $this_CallNative_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getFindMultipleParserRuleCall_2()); 
    }
    this_FindMultiple_2=ruleFindMultiple
    { 
        $current = $this_FindMultiple_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getProcedureCallParserRuleCall_0_0()); 
    }
    this_ProcedureCall_0=ruleProcedureCall
    { 
        $current = $this_ProcedureCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getOperationParserRuleCall_0_1()); 
    }
    this_Operation_1=ruleOperation
    { 
        $current = $this_Operation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getCallNativeWithResultParserRuleCall_0_2()); 
    }
    this_CallNativeWithResult_2=ruleCallNativeWithResult
    { 
        $current = $this_CallNativeWithResult_2.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariableVariableParserRuleCall_2_0()); 
	    }
		lv_variable_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_4_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFindMultiple
entryRuleFindMultiple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFindMultipleRule()); }
	 iv_ruleFindMultiple=ruleFindMultiple 
	 { $current=$iv_ruleFindMultiple.current; } 
	 EOF 
;

// Rule FindMultiple
ruleFindMultiple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='findMultiple' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFindMultipleAccess().getFindMultipleKeyword_0());
    }
	otherlv_1='by' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFindMultipleAccess().getByKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFindMultipleAccess().getPropPROPERTYEnumRuleCall_2_0()); 
	    }
		lv_prop_2_0=rulePROPERTY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFindMultipleRule());
	        }
       		set(
       			$current, 
       			"prop",
        		lv_prop_2_0, 
        		"PROPERTY");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFindMultipleRule());
	        }
        }
	otherlv_3=RULE_VAR_NAME
	{
		newLeafNode(otherlv_3, grammarAccess.getFindMultipleAccess().getValueSeleniumTypeCrossReference_3_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFindMultipleAccess().getArrayAccessArrayAccessParserRuleCall_4_0()); 
	    }
		lv_arrayAccess_4_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFindMultipleRule());
	        }
       		set(
       			$current, 
       			"arrayAccess",
        		lv_arrayAccess_4_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFindMultipleAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFindMultipleAccess().getArrayArrayParserRuleCall_6_0()); 
	    }
		lv_array_6_0=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFindMultipleRule());
	        }
       		set(
       			$current, 
       			"array",
        		lv_array_6_0, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProcedureCall
entryRuleProcedureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureCallRule()); }
	 iv_ruleProcedureCall=ruleProcedureCall 
	 { $current=$iv_ruleProcedureCall.current; } 
	 EOF 
;

// Rule ProcedureCall
ruleProcedureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='call' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcedureCallAccess().getCallKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureCallRule());
	        }
        }
	otherlv_1=RULE_PROC_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getProcedureCallAccess().getProcProcedureCrossReference_1_0()); 
	}

)
)(	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcedureCallAccess().getExclamationMarkKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureCallRule());
	        }
        }
	otherlv_3=RULE_VAR_NAME
	{
		newLeafNode(otherlv_3, grammarAccess.getProcedureCallAccess().getParamsSeleniumTypeCrossReference_2_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureCallAccess().getArrayAccessArrayAccessParserRuleCall_2_2_0()); 
	    }
		lv_arrayAccess_4_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureCallRule());
	        }
       		add(
       			$current, 
       			"arrayAccess",
        		lv_arrayAccess_4_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?)*)
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_strvalue_0_0=RULE_STRING
		{
			newLeafNode(lv_strvalue_0_0, grammarAccess.getOperationAccess().getStrvalueSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"strvalue",
        		lv_strvalue_0_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_intvalue_1_0=RULE_INT
		{
			newLeafNode(lv_intvalue_1_0, grammarAccess.getOperationAccess().getIntvalueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intvalue",
        		lv_intvalue_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleCallNative
entryRuleCallNative returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallNativeRule()); }
	 iv_ruleCallNative=ruleCallNative 
	 { $current=$iv_ruleCallNative.current; } 
	 EOF 
;

// Rule CallNative
ruleCallNative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCallNativeAccess().getOpenParserRuleCall_0()); 
    }
    this_Open_0=ruleOpen
    { 
        $current = $this_Open_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallNativeAccess().getCloseParserRuleCall_1()); 
    }
    this_Close_1=ruleClose
    { 
        $current = $this_Close_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallNativeAccess().getGoParserRuleCall_2()); 
    }
    this_Go_2=ruleGo
    { 
        $current = $this_Go_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallNativeAccess().getFillParserRuleCall_3()); 
    }
    this_Fill_3=ruleFill
    { 
        $current = $this_Fill_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallNativeAccess().getClickParserRuleCall_4()); 
    }
    this_Click_4=ruleClick
    { 
        $current = $this_Click_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallNativeAccess().getVerifyParserRuleCall_5()); 
    }
    this_Verify_5=ruleVerify
    { 
        $current = $this_Verify_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallNativeAccess().getShowParserRuleCall_6()); 
    }
    this_Show_6=ruleShow
    { 
        $current = $this_Show_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallNativeAccess().getShowMultipleParserRuleCall_7()); 
    }
    this_ShowMultiple_7=ruleShowMultiple
    { 
        $current = $this_ShowMultiple_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCallNativeWithResult
entryRuleCallNativeWithResult returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCallNativeWithResultRule()); }
	 iv_ruleCallNativeWithResult=ruleCallNativeWithResult 
	 { $current=$iv_ruleCallNativeWithResult.current; } 
	 EOF 
;

// Rule CallNativeWithResult
ruleCallNativeWithResult returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCallNativeWithResultAccess().getFindParserRuleCall_0()); 
    }
    this_Find_0=ruleFind
    { 
        $current = $this_Find_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallNativeWithResultAccess().getGetParserRuleCall_1()); 
    }
    this_Get_1=ruleGet
    { 
        $current = $this_Get_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCallNativeWithResultAccess().getLenParserRuleCall_2()); 
    }
    this_Len_2=ruleLen
    { 
        $current = $this_Len_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenRule()); }
	 iv_ruleOpen=ruleOpen 
	 { $current=$iv_ruleOpen.current; } 
	 EOF 
;

// Rule Open
ruleOpen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='open' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOpenAccess().getOpenKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOpenAccess().getBrowserBROWSEREnumRuleCall_1_0()); 
	    }
		lv_browser_1_0=ruleBROWSER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOpenRule());
	        }
       		set(
       			$current, 
       			"browser",
        		lv_browser_1_0, 
        		"BROWSER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleClose
entryRuleClose returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCloseRule()); }
	 iv_ruleClose=ruleClose 
	 { $current=$iv_ruleClose.current; } 
	 EOF 
;

// Rule Close
ruleClose returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='close' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCloseAccess().getCloseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCloseAccess().getBrowserBROWSEREnumRuleCall_1_0()); 
	    }
		lv_browser_1_0=ruleBROWSER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCloseRule());
	        }
       		set(
       			$current, 
       			"browser",
        		lv_browser_1_0, 
        		"BROWSER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGo
entryRuleGo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGoRule()); }
	 iv_ruleGo=ruleGo 
	 { $current=$iv_ruleGo.current; } 
	 EOF 
;

// Rule Go
ruleGo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='go' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGoAccess().getGoKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGoRule());
	        }
        }
	otherlv_1=RULE_VAR_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getGoAccess().getLocationSeleniumTypeCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGoAccess().getArrayAccessArrayAccessParserRuleCall_2_0()); 
	    }
		lv_arrayAccess_2_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGoRule());
	        }
       		set(
       			$current, 
       			"arrayAccess",
        		lv_arrayAccess_2_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFind
entryRuleFind returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFindRule()); }
	 iv_ruleFind=ruleFind 
	 { $current=$iv_ruleFind.current; } 
	 EOF 
;

// Rule Find
ruleFind returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='find' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFindAccess().getFindKeyword_0());
    }
	otherlv_1='by' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFindAccess().getByKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFindAccess().getPropPROPERTYEnumRuleCall_2_0()); 
	    }
		lv_prop_2_0=rulePROPERTY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFindRule());
	        }
       		set(
       			$current, 
       			"prop",
        		lv_prop_2_0, 
        		"PROPERTY");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFindRule());
	        }
        }
	otherlv_3=RULE_VAR_NAME
	{
		newLeafNode(otherlv_3, grammarAccess.getFindAccess().getValueSeleniumTypeCrossReference_3_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFindAccess().getArrayAccessArrayAccessParserRuleCall_4_0()); 
	    }
		lv_arrayAccess_4_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFindRule());
	        }
       		set(
       			$current, 
       			"arrayAccess",
        		lv_arrayAccess_4_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFill
entryRuleFill returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFillRule()); }
	 iv_ruleFill=ruleFill 
	 { $current=$iv_ruleFill.current; } 
	 EOF 
;

// Rule Fill
ruleFill returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fill' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFillAccess().getFillKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFillRule());
	        }
        }
	otherlv_1=RULE_VAR_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getFillAccess().getElemSeleniumTypeCrossReference_1_0()); 
	}

)
)	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFillAccess().getWithKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFillRule());
	        }
        }
	otherlv_3=RULE_VAR_NAME
	{
		newLeafNode(otherlv_3, grammarAccess.getFillAccess().getValueSeleniumTypeCrossReference_3_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFillAccess().getArrayAccessArrayAccessParserRuleCall_4_0()); 
	    }
		lv_arrayAccess_4_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFillRule());
	        }
       		set(
       			$current, 
       			"arrayAccess",
        		lv_arrayAccess_4_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleClick
entryRuleClick returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClickRule()); }
	 iv_ruleClick=ruleClick 
	 { $current=$iv_ruleClick.current; } 
	 EOF 
;

// Rule Click
ruleClick returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='click' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClickAccess().getClickKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClickRule());
	        }
        }
	otherlv_1=RULE_VAR_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getClickAccess().getElemSeleniumTypeCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClickAccess().getArrayAccessArrayAccessParserRuleCall_2_0()); 
	    }
		lv_arrayAccess_2_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClickRule());
	        }
       		set(
       			$current, 
       			"arrayAccess",
        		lv_arrayAccess_2_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleVerify
entryRuleVerify returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVerifyRule()); }
	 iv_ruleVerify=ruleVerify 
	 { $current=$iv_ruleVerify.current; } 
	 EOF 
;

// Rule Verify
ruleVerify returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='verify' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVerifyAccess().getVerifyKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVerifyRule());
	        }
        }
	otherlv_1=RULE_VAR_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getVerifyAccess().getElemSeleniumTypeCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVerifyAccess().getLeftArrayAccessArrayAccessParserRuleCall_2_0()); 
	    }
		lv_leftArrayAccess_2_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVerifyRule());
	        }
       		set(
       			$current, 
       			"leftArrayAccess",
        		lv_leftArrayAccess_2_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVerifyAccess().getCompCOMPARATOREnumRuleCall_3_0()); 
	    }
		lv_comp_3_0=ruleCOMPARATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVerifyRule());
	        }
       		set(
       			$current, 
       			"comp",
        		lv_comp_3_0, 
        		"COMPARATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVerifyRule());
	        }
        }
	otherlv_4=RULE_VAR_NAME
	{
		newLeafNode(otherlv_4, grammarAccess.getVerifyAccess().getValueSeleniumTypeCrossReference_4_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVerifyAccess().getRightArrayAccessArrayAccessParserRuleCall_5_0()); 
	    }
		lv_rightArrayAccess_5_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVerifyRule());
	        }
       		set(
       			$current, 
       			"rightArrayAccess",
        		lv_rightArrayAccess_5_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleShow
entryRuleShow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShowRule()); }
	 iv_ruleShow=ruleShow 
	 { $current=$iv_ruleShow.current; } 
	 EOF 
;

// Rule Show
ruleShow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='show' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getShowAccess().getShowKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getShowRule());
	        }
        }
	otherlv_1=RULE_VAR_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getShowAccess().getElemSeleniumTypeCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShowAccess().getArrayAccessArrayAccessParserRuleCall_2_0()); 
	    }
		lv_arrayAccess_2_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShowRule());
	        }
       		set(
       			$current, 
       			"arrayAccess",
        		lv_arrayAccess_2_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleShowMultiple
entryRuleShowMultiple returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShowMultipleRule()); }
	 iv_ruleShowMultiple=ruleShowMultiple 
	 { $current=$iv_ruleShowMultiple.current; } 
	 EOF 
;

// Rule ShowMultiple
ruleShowMultiple returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='showMultiple' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getShowMultipleAccess().getShowMultipleKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getShowMultipleRule());
	        }
        }
	otherlv_1=RULE_VAR_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getShowMultipleAccess().getElemSeleniumTypeCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getShowMultipleAccess().getArrayAccessArrayAccessParserRuleCall_2_0()); 
	    }
		lv_arrayAccess_2_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShowMultipleRule());
	        }
       		set(
       			$current, 
       			"arrayAccess",
        		lv_arrayAccess_2_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleGet
entryRuleGet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetRule()); }
	 iv_ruleGet=ruleGet 
	 { $current=$iv_ruleGet.current; } 
	 EOF 
;

// Rule Get
ruleGet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='get' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetAccess().getGetKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGetAccess().getPropPROPERTYEnumRuleCall_1_0()); 
	    }
		lv_prop_1_0=rulePROPERTY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetRule());
	        }
       		set(
       			$current, 
       			"prop",
        		lv_prop_1_0, 
        		"PROPERTY");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGetAccess().getFromKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetRule());
	        }
        }
	otherlv_3=RULE_VAR_NAME
	{
		newLeafNode(otherlv_3, grammarAccess.getGetAccess().getElemSeleniumTypeCrossReference_3_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGetAccess().getArrayAccessArrayAccessParserRuleCall_4_0()); 
	    }
		lv_arrayAccess_4_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGetRule());
	        }
       		set(
       			$current, 
       			"arrayAccess",
        		lv_arrayAccess_4_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleLen
entryRuleLen returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLenRule()); }
	 iv_ruleLen=ruleLen 
	 { $current=$iv_ruleLen.current; } 
	 EOF 
;

// Rule Len
ruleLen returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='len' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLenAccess().getLenKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLenRule());
	        }
        }
	otherlv_1=RULE_VAR_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getLenAccess().getElemSeleniumTypeCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLenAccess().getArrayAccessArrayAccessParserRuleCall_2_0()); 
	    }
		lv_arrayAccess_2_0=ruleArrayAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLenRule());
	        }
       		set(
       			$current, 
       			"arrayAccess",
        		lv_arrayAccess_2_0, 
        		"ArrayAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;







// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_VAR_NAME
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameVAR_NAMETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"VAR_NAME");
	    }

)
)
;





// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current; } 
	 EOF 
;

// Rule Array
ruleArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_VAR_NAME
		{
			newLeafNode(lv_name_0_0, grammarAccess.getArrayAccess().getNameVAR_NAMETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"VAR_NAME");
	    }

)
)	otherlv_1='[]' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayAccess().getLeftSquareBracketRightSquareBracketKeyword_1());
    }
)
;





// Entry rule entryRuleArrayAccess
entryRuleArrayAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayAccessRule()); }
	 iv_ruleArrayAccess=ruleArrayAccess 
	 { $current=$iv_ruleArrayAccess.current; } 
	 EOF 
;

// Rule ArrayAccess
ruleArrayAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayAccessAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_id_1_0=RULE_INT
		{
			newLeafNode(lv_id_1_0, grammarAccess.getArrayAccessAccess().getIdINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayAccessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"INT");
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayAccessAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Rule BROWSER
ruleBROWSER returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='firefox' 
	{
        $current = grammarAccess.getBROWSERAccess().getFirefoxEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBROWSERAccess().getFirefoxEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='chrome' 
	{
        $current = grammarAccess.getBROWSERAccess().getChromeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBROWSERAccess().getChromeEnumLiteralDeclaration_1()); 
    }
));



// Rule PROPERTY
rulePROPERTY returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='class' 
	{
        $current = grammarAccess.getPROPERTYAccess().getByclassnameEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPROPERTYAccess().getByclassnameEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='id' 
	{
        $current = grammarAccess.getPROPERTYAccess().getByidEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPROPERTYAccess().getByidEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='cssSelector' 
	{
        $current = grammarAccess.getPROPERTYAccess().getBycssEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPROPERTYAccess().getBycssEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='xpath' 
	{
        $current = grammarAccess.getPROPERTYAccess().getByxpathEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getPROPERTYAccess().getByxpathEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='name' 
	{
        $current = grammarAccess.getPROPERTYAccess().getBynameEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getPROPERTYAccess().getBynameEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='tagName' 
	{
        $current = grammarAccess.getPROPERTYAccess().getBytagEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getPROPERTYAccess().getBytagEnumLiteralDeclaration_5()); 
    }
));



// Rule COMPARATOR
ruleCOMPARATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='equals' 
	{
        $current = grammarAccess.getCOMPARATORAccess().getEqualsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCOMPARATORAccess().getEqualsEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='contains' 
	{
        $current = grammarAccess.getCOMPARATORAccess().getContainsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCOMPARATORAccess().getContainsEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='different' 
	{
        $current = grammarAccess.getCOMPARATORAccess().getDifferentEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCOMPARATORAccess().getDifferentEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='greater' 
	{
        $current = grammarAccess.getCOMPARATORAccess().getGreaterEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCOMPARATORAccess().getGreaterEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='lower' 
	{
        $current = grammarAccess.getCOMPARATORAccess().getLowerEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCOMPARATORAccess().getLowerEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='starts' 
	{
        $current = grammarAccess.getCOMPARATORAccess().getStartsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCOMPARATORAccess().getStartsEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='ends' 
	{
        $current = grammarAccess.getCOMPARATORAccess().getEndsEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getCOMPARATORAccess().getEndsEnumLiteralDeclaration_6()); 
    }
));



// Rule TYPE
ruleTYPE returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='string' 
	{
        $current = grammarAccess.getTYPEAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTYPEAccess().getStringEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='integer' 
	{
        $current = grammarAccess.getTYPEAccess().getIntegerEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTYPEAccess().getIntegerEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='element' 
	{
        $current = grammarAccess.getTYPEAccess().getWebelementEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTYPEAccess().getWebelementEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='element[]' 
	{
        $current = grammarAccess.getTYPEAccess().getArrayEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTYPEAccess().getArrayEnumLiteralDeclaration_3()); 
    }
));



RULE_VAR_NAME : 'a'..'z' RULE_ID?;

RULE_PROC_NAME : 'A'..'Z' RULE_ID?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


